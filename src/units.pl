#!/usr/bin/env perl

# Copyright 2016  Thomas E. Vaughan
# Distributable under the terms of the GNU GPL, Version 3 or later.

open(INPUT, '<', "units.txt");
open(OUT_H, '>', "units.hpp");
open(OUT_C, '>', "units.cpp");

print OUT_H <<'EOF1';

// This file was generated by the 'units' executable.

#include "dimensions.hpp"

namespace num {
EOF1

print OUT_C << 'EOF2';

// This file was generated by the 'units' executable.

#include "units.hpp"

using namespace num;

EOF2

while(<INPUT>) {
   s/#.*$//;         # Remove comment.
   next if /^\s*$/;  # Skip blank line.
   my($pnm, $snm, $dim, $cnv) = split;
   print OUT_H <<"EOF3";

struct $pnm : public $dim {
   $pnm(double v) : $dim(v * $cnv) {}
   $pnm($pnm const& dv) = default;
   static double constexpr c = 1.0 / $cnv;

   friend std::ostream& operator<<(std::ostream& os, $pnm const& dv)
   {
      return os << "[" << c * dv.v_ << " $snm]";
   }
};

extern $pnm const $snm;
EOF3
   print OUT_C "$pnm const num::$snm(1.0);\n";
}

print OUT_H "}\n";
print OUT_C "\n";

